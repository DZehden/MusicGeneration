#usr/bin/env python
# coding: utf-8

import tensorflow as tf
import numpy as np
import os
from tensorflow.keras import layers
import time
from src.midi_utils import ndarray_to_midi
import pypianoroll
import datetime

BATCH_SIZE = 1

noise_dim = 100
num_examples_to_generate = 1
seed = tf.random.normal([num_examples_to_generate, noise_dim])


class MusicGAN:
    def __init__(self, checkpoint_dir, output_dir, load_model=False):
        """
        Creates a MusicGAN Object

        :param checkpoint_dir: str
            filepath to checkpoint directory
        :param load_model: boolean
            flag indicating whether or not to load model from checkpoint
        """
        self.checkpoint_dir = checkpoint_dir
        self.checkpoint_prefix = os.path.join(self.checkpoint_dir, "ckpt")
        gen = MusicGAN.make_generator_model()
        disc = MusicGAN.make_discriminator_model()
        gen_opt = tf.keras.optimizers.Adam(1e-2)
        disc_opt = tf.keras.optimizers.Adam(1e-4)
        self.checkpoint = tf.train.Checkpoint(generator_optimizer=gen_opt,
                                              discriminator_optimizer=disc_opt,
                                              generator=gen,
                                              discriminator=disc)
        self.chkpt_man = tf.train.CheckpointManager(self.checkpoint, self.checkpoint_dir, max_to_keep=3)
        if load_model:
            self.checkpoint.restore(self.chkpt_man.latest_checkpoint)
            print('Loaded checkpoint')
            print(self.chkpt_man.latest_checkpoint)
        else:
            print('No checkpoint loaded')
        self.generator = gen
        self.discriminator = disc
        self.generator_optimizer = gen_opt
        self.discriminator_optimizer = disc_opt
        self.output_dir = output_dir

    @staticmethod
    def make_generator_model():
        """
        Creates a generator CNN for GAN

        :return: tf.keras.Sequential
        """
        model = tf.keras.Sequential()
        model.add(layers.Dense(6*8*256, use_bias=False, input_shape=(100,)))
        model.add(layers.BatchNormalization())
        model.add(layers.LeakyReLU())

        model.add(layers.Reshape((6, 8, 256)))
        assert model.output_shape == (None, 6, 8, 256)  # Note: None is the batch size

        model.add(layers.Conv2DTranspose(128, (5, 5), strides=(1, 1), padding='same', use_bias=False))
        assert model.output_shape == (None, 6, 8, 128)
        model.add(layers.BatchNormalization())
        model.add(layers.LeakyReLU())

        model.add(layers.Conv2DTranspose(64, (4, 4), strides=(4, 4), padding='same', use_bias=False))
        assert model.output_shape == (None, 24, 32, 64)
        model.add(layers.BatchNormalization())
        model.add(layers.LeakyReLU())

        model.add(layers.Conv2DTranspose(32, (4, 2), strides=(4, 2), padding='same', use_bias=False))
        assert model.output_shape == (None, 96, 64, 32)
        model.add(layers.BatchNormalization())
        model.add(layers.LeakyReLU())

        model.add(layers.Conv2DTranspose(1, (4, 2), strides=(4, 2), padding='same', use_bias=False, activation='relu'))
        print('5')
        print(model.output_shape)
        assert model.output_shape == (None, 384, 128, 1)

        return model

    @staticmethod
    def make_discriminator_model():
        """
        Create discriminator for GAN

        :return: tf.keras.Sequential
        """
        model = tf.keras.Sequential()
        model.add(layers.Conv2D(32, (4, 2), strides=(4, 2), padding='same',
                                input_shape=[384, 128, 1]))
        model.add(layers.LeakyReLU())
        model.add(layers.Dropout(0.3))

        model.add(layers.Conv2D(64, (4, 4), strides=(4, 4), padding='same'))
        model.add(layers.LeakyReLU())
        model.add(layers.Dropout(0.3))

        model.add(layers.Conv2D(128, (4, 4), strides=(4, 4), padding='same'))
        model.add(layers.Dropout(0.3))

        model.add(layers.Flatten())
        model.add(layers.Dense(1, activation='sigmoid'))

        return model

    @staticmethod
    def discriminator_loss(real_output, fake_output):
        """
        Loss function for discriminator model

        :param real_output: tf.Tensor
            discriminator result on real training data
        :param fake_output: tf.Tensor
            discriminator result on data created by generator
        :return: np.float
        """
        cross_entropy = tf.keras.losses.BinaryCrossentropy(from_logits=True)
        real_loss = cross_entropy(tf.ones_like(real_output), real_output)
        fake_loss = cross_entropy(tf.zeros_like(fake_output), fake_output)

        total_loss = real_loss + fake_loss
        return total_loss

    @staticmethod
    def generator_loss(fake_output):
        """
        Loss function for generator

        :param fake_output:
            discriminator result on data generated by generator
        :return: np.float
        """
        cross_entropy = tf.keras.losses.BinaryCrossentropy(from_logits=True)
        return cross_entropy(tf.ones_like(fake_output), fake_output)
    def train(self, dataset, epochs):
        """
        Trains model on a dataset for a certain number of epochs

        :param dataset: MusicDataset
             Dataset to train model on
        :param epochs: int
            number of epochs to train for
        :return: None
        """
        gen_train = 1
        count = 0
        for epoch in range(epochs):
            start = time.time()
            if (count == 25):
                gen_train = 0
                count = 0
            else:
                count = count + 1
                gen_train = 1
            for image_batch in dataset:
                resized_in = np.resize(image_batch, (1, 384, 128, 1))
                resized_in = resized_in.astype('float32')
                self.train_step(resized_in, self.generator, self.generator_optimizer, serlf.discriminator, self.discriminator_optimizer, gen_train)
            # Save the model every 200 epochs
            if (epoch + 1) % 50 == 0:
                self.checkpoint.save(file_prefix = self.checkpoint_prefix)
                self.generate_and_save_audio(self.generator, epoch + 1, seed)
                pred = self.predict_from_midi(self.output_dir+'50.mid')
                print('Prediction on ' + '50.mid'+ ': {0}'.format(pred))
            print('Time for epoch {} is {} sec'.format(epoch + 1, time.time()-start))
            #pred = self.predict_from_midi('./output/1.mid')
            #print('Prediction: {0}'.format(pred))

        # Generate after the final epoch
        self.generate_and_save_audio(self.generator, epochs, seed)

    def generate_and_save_audio(self, model, epoch, test_input):
        """
        Generate an artificial output for a test input

        :param model: tf.keras.Sequential
            Generator to make prediction
        :param epoch: int
            epoch number
        :param test_input: tf.tensor
            Random number array to seed model with
        :return: None
        """
        predictions = model(test_input, training=False)
        predictions = np.reshape(predictions,(384,128))
        ndarray_to_midi(predictions, self.output_dir + str(datetime.datetime.now().strftime("%H_%M")) + '_epoch_' + str(epoch) + '.mid')

    def predict_from_midi(self, path_to_midi):
        mtrack = pypianoroll.parse(path_to_midi)
        mat = mtrack.tracks[0].pianoroll
        resized_in = np.resize(mat, (1, 384, 128, 1))
        resized_in = resized_in.astype('float32')
        prediction = self.discriminator(resized_in, training=False)
        return prediction

    @staticmethod
    def load_model(checkpoint_dir):
        res = tf.train.Checkpoint.restore(checkpoint_dir)
        return res



#@tf.function
    def train_step(self, audio, generator, generator_optimizer, discriminator, discriminator_optimizer, gen_train):
        noise = tf.random.normal([BATCH_SIZE, noise_dim]) 
        with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape:
            generated_audio = generator(noise, training=True)
            real_output = discriminator(audio, training=True)
            fake_output = discriminator(generated_audio, training=True)
            print('     Current prediction on training data: {} '.format(real_output))
            print('     Current prediction on generated data: {} '.format(fake_output))
            gen_loss = MusicGAN.generator_loss(fake_output)
            disc_loss = MusicGAN.discriminator_loss(real_output, fake_output)
        if (gen_train):
            gradients_of_generator = gen_tape.gradient(gen_loss, generator.trainable_variables)
            generator_optimizer.apply_gradients(zip(gradients_of_generator, generator.trainable_variables))
        else:
            gradients_of_discriminator = disc_tape.gradient(disc_loss, discriminator.trainable_variables)
            discriminator_optimizer.apply_gradients(zip(gradients_of_discriminator, discriminator.trainable_variables))
    #if gen_train:
        #generator_optimizer.apply_gradients(zip(gradients_of_generator, generator.trainable_variables))
        #discriminator_optimizer.apply_gradients(zip(gradients_of_discriminator, discriminator.trainable_variables))




